<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sprite_cuerda</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>sensitivity = 0.1;
max_spd = 8;
acc = 0.2;

fb_vel=0;
rl_vel=0;
z_vel=0;

z=0;
height=0;
pitch=0;

instance_create(x,y,viaje_camara);
instance_create(x,y,obj_fondo);
with instance_create(x,y,obj_fondo){tam=6400*4}
with instance_create(x,y,obj_fondo){initx=+3000;inity=-24000;tam=6400/8;z=1200}
with instance_create(x,y,obj_fondo){initx=+3000;inity=+12000;tam=6400/8;z=8000}
with instance_create(x,y,obj_fondo){initx=+12000;inity=-2000;tam=6400/8;z=-4000}
with instance_create(x,y,obj_fondo){initx=+5000;inity=-11000;tam=6400/8;z=0}
with instance_create(x,y,obj_fondo){initx=+9000;inity=-9000;tam=tam=6400/8;z=-1000}

instance_create(x,y,presentacion_onirico);
audio_stop_all();
audio_play_sound(tema_true_final, 0, true);
//instance_create(x,y,obj_fondo2);
//x=random_range(0,room_width);
//y=random_range(0,room_height);
//while place_meeting(x,y,obj_lugares){
//    x=random_range(0,room_width);
//    y=random_range(0,room_height);}
    
ancho=window_get_width();
alto=window_get_height();

// Lock the mouse to the centre of the display.
display_mouse_set(display_get_width()*0.5, display_get_height()*0.5);

dire=0;
dirant=0;
direction=90;
enfriado=270;
dif=0;

controldeath = .20
conizqhor = 0
conizqver = 0
conderhor = 0
conderver = 0
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//if(gamepad_is_connected(0)) //Used to know if a slot is connected to a game controller
//{
//    gamepad_set_axis_deadzone(0, .1); //Creates a zone where either of the sticks must give a larger value than the deadzone value (.1) otherwise it's interpreted as 0.
    controldeath = .2; //A variable to allow easy manipulation later on

    //These variables will hold the value of the left and right sticks axis.
    conizqhor = gamepad_axis_value(0, gp_axislh);
    conizqver = gamepad_axis_value(0, gp_axislv);
    conderhor = gamepad_axis_value(0, gp_axisrh);
    conderver = gamepad_axis_value(0, gp_axisrv);
//}
if conderhor &gt; controldeath or conderhor &lt; -controldeath or conderver &gt; controldeath or conderver &lt; -controldeath{
    direction=direction-conderhor
    pitch=pitch+conderver
}
else{
// Mouse controls.
dirant=direction;
direction -= sensitivity*(display_mouse_get_x() - display_get_width()*0.5);
pitch += sensitivity*(display_mouse_get_y() - display_get_height()*0.5);
}
//Limit the pitch
pitch=clamp(pitch,-80,80);

// Lock the mouse to the centre of the display.
display_mouse_set(display_get_width()*0.5, display_get_height()*0.5);

// Keyboard controls.
var fb_keys=(keyboard_check(ord('W')) or gamepad_button_check(0, gp_padu) or conizqver&lt;-controldeath)-(keyboard_check(ord('S')) or gamepad_button_check(0, gp_padd) or conizqver&gt;controldeath);
var rl_keys=(keyboard_check(ord('D')) or gamepad_button_check(0, gp_padr) or conizqhor&gt;controldeath)-(keyboard_check(ord('A')) or gamepad_button_check(0, gp_padl) or conizqhor&lt;-controldeath);

if keyboard_check(vk_alt) or gamepad_button_check(0, gp_shoulderrb) or gamepad_button_check(0, gp_shoulderlb)
{
max_spd = 8;
acc = 0.2;
}
else
{
{
max_spd = 8;
acc = 0.2;
}
}

fb_vel +=fb_keys*acc;
rl_vel +=rl_keys*acc;

// Limit the speeds
fb_vel=clamp(fb_vel, -max_spd, max_spd);
rl_vel=clamp(rl_vel, -max_spd, max_spd);

//Decelerate if moving and no keys pressed.

if (fb_keys == 0 &amp;&amp; abs(fb_vel) &gt;= acc)
    {
        fb_vel-=sign(fb_vel)*acc;
    }
if (rl_keys == 0 &amp;&amp; abs(rl_vel) &gt;= acc)
    {
        rl_vel-=sign(rl_vel)*acc;
    }
    
//Translate the velocities in terms of x and y.
var x_vel= lengthdir_x(fb_vel, direction) + lengthdir_x(rl_vel,direction-90);
var y_vel= lengthdir_y(fb_vel, direction) + lengthdir_y(rl_vel,direction-90);
var z_vel= -lengthdir_y(fb_vel, pitch+180);

//var z_keys=keyboard_check(ord('Q'))-keyboard_check(ord('E'));
//z_vel +=z_keys*acc;
//z_vel=clamp(z_vel, -max_spd, max_spd);
//if (z_keys == 0 &amp;&amp; abs(z_vel) &gt;= acc){z_vel-=sign(z_vel)*acc;}


if x +x_vel &lt; -room_width*2 or x +x_vel &gt; room_width*2 {x_vel=0}
x+=x_vel;

if y +y_vel &lt; -room_height*2 or y +y_vel&gt; room_height*2{y_vel=0}
y+=y_vel;

if z+z_vel&lt;-10000 or z+z_vel&gt;10000{z_vel=0}
z+=z_vel;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="64">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>exit;
equis=view_xview+ancho/2;
yeye=view_yview+alto/2;
escax=floor(ancho/view_wview);
escay=floor(alto/view_hview);
dire=direction;
dire=point_direction(ancho/2, alto/2, mouse_x, mouse_y);
if enfriado&gt;0{
enfriado=enfriado-1
}
else{enfriado=0;dif=dirant-direction;enfriado=8}



if keyboard_check(ord('W')) or keyboard_check(ord('S'))
{
    dira=keyboard_check(ord('W')) - keyboard_check(ord('S'));
    if abs(dif)&lt;1{
        if pitch&gt;30 or pitch&lt;-30{
        draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,-dira*sign(pitch)*90,c_white,1);
        }
        else{draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,90,c_white,1);}
        }
    else{
        draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,90-sign(dif)*90,c_white,1);
    }
}
else if keyboard_check(ord('D')) or keyboard_check(ord('A'))
{
    dira=keyboard_check(ord('D')) - keyboard_check(ord('A'));
    draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,90-dira*90,c_white,1);
}
else
{
    if abs(dif)&lt;1
    {
        draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,90,c_white,1);
    }
    else
    {
        draw_sprite_ext(sprite_khobethmo,0,equis,yeye,escax/4,escay/4,90-sign(dif)*90,c_white,1);
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>//draw_sprite_ext(sprite_cuerda,0,x,y,1,1, direction, c_white,1);
//image_angle=direction+90;
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
